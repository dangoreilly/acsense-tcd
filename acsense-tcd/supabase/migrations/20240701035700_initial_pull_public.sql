
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "plv8" WITH SCHEMA "pg_catalog";

CREATE EXTENSION IF NOT EXISTS "moddatetime" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."check_user_permissions"("event" "jsonb") RETURNS "jsonb"
    LANGUAGE "plv8"
    AS $_$var result = plv8.execute("select * from public.profiles where user_id = $1", [event.user_id]);

if (!event.claims) {
  event.claims = {};
}

// Update the level in the claims
event.claims.permissions = result;

return event;$_$;

ALTER FUNCTION "public"."check_user_permissions"("event" "jsonb") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."custom_access_token_hook"("event" "jsonb") RETURNS "jsonb"
    LANGUAGE "plpgsql"
    AS $$
  declare
    claims jsonb;
    is_admin boolean;
  begin
    -- Check if the user is marked as admin in the profiles table
    select is_admin into is_admin from profiles where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    -- Check if 'user_metadata' exists in claims
    if jsonb_typeof(claims->'user_metadata') is null then
      -- If 'user_metadata' does not exist, create an empty object
      claims := jsonb_set(claims, '{user_metadata}', '{}');
    end if;

    -- Set a claim of 'admin'
    claims := jsonb_set(claims, '{user_metadata, admin}', 'true');

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;
$$;

ALTER FUNCTION "public"."custom_access_token_hook"("event" "jsonb") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_user_permissions"("user_uuid" "uuid") RETURNS "jsonb"
    LANGUAGE "plv8"
    AS $_$return plv8.execute("select * from public.profiles where user_id = $1", [user_uuid]);$_$;

ALTER FUNCTION "public"."get_user_permissions"("user_uuid" "uuid") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."building_gallery_images" (
    "id" bigint NOT NULL,
    "building" "text",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "url" "text",
    "alt" "text",
    "caption" "text" DEFAULT ''::"text"
);

ALTER TABLE "public"."building_gallery_images" OWNER TO "postgres";

COMMENT ON COLUMN "public"."building_gallery_images"."caption" IS 'Text to be displayed with the image';

ALTER TABLE "public"."building_gallery_images" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."building_gallery_images_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."buildings" (
    "created_at" timestamp with time zone DEFAULT "now"(),
    "canonical" "text" DEFAULT 'building_url'::"text" NOT NULL,
    "display_name" "text" DEFAULT 'Building Name'::"text" NOT NULL,
    "aka" "text" DEFAULT 'aka'::"text",
    "map_label_1" "text",
    "map_label_2" "text",
    "map_label_3" "text",
    "geometry" "json" DEFAULT '{}'::"json" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "sense_exp" "text" DEFAULT ''::"text",
    "wayfinding" "text" DEFAULT ''::"text",
    "phys_access" "text" DEFAULT ''::"text",
    "tips" "text"[] NOT NULL,
    "further_info" "text" DEFAULT ''::"text",
    "opening_times" "json",
    "sense_exp_display" boolean DEFAULT false NOT NULL,
    "phys_access_display" boolean DEFAULT false NOT NULL,
    "wayfinding_display" boolean DEFAULT false NOT NULL,
    "furtherinfo_display" boolean DEFAULT false NOT NULL,
    "primary_image_url" "text",
    "primary_image_alt" "text",
    "UUID" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "always_display" boolean DEFAULT false,
    "sense_exp_video" "text",
    "wayfinding_video" "text",
    "phys_access_video" "text",
    "entry_floor" smallint DEFAULT '-1'::smallint NOT NULL,
    "internal_map_size" double precision[] DEFAULT '{0,0}'::double precision[] NOT NULL,
    "published" boolean DEFAULT true NOT NULL,
    "floorplans_published" boolean DEFAULT false NOT NULL,
    "rooms_published" boolean DEFAULT false NOT NULL,
    "updated_at" timestamp with time zone
);

ALTER TABLE "public"."buildings" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."floorplans" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "building" "uuid" NOT NULL,
    "level" smallint NOT NULL,
    "label" "text" NOT NULL,
    "url" "text" NOT NULL
);

ALTER TABLE "public"."floorplans" OWNER TO "postgres";

ALTER TABLE "public"."floorplans" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."floorplans_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."flyovers" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "label" "text" NOT NULL,
    "location" double precision[] NOT NULL,
    "target" double precision[] NOT NULL
);

ALTER TABLE "public"."flyovers" OWNER TO "postgres";

ALTER TABLE "public"."flyovers" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."flyovers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."nav_nodes" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "building" "uuid" NOT NULL,
    "label" "text" NOT NULL,
    "node_type" "text" DEFAULT 'stairs'::"text" NOT NULL,
    "presence" boolean[] DEFAULT '{t}'::boolean[] NOT NULL,
    "location_up" double precision[] DEFAULT '{0,0}'::double precision[] NOT NULL,
    "location_down" double precision[] DEFAULT '{0,0}'::double precision[] NOT NULL
);

ALTER TABLE "public"."nav_nodes" OWNER TO "postgres";

ALTER TABLE "public"."nav_nodes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."nav_nodes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."overlays" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "url" "text" DEFAULT '""'::"text" NOT NULL,
    "bounds" double precision[] DEFAULT '{{0,0},{0,0}}'::double precision[] NOT NULL,
    "high_detail" boolean DEFAULT false NOT NULL,
    "url_dark" "text"
);

ALTER TABLE "public"."overlays" OWNER TO "postgres";

COMMENT ON TABLE "public"."overlays" IS 'SVGs overlaid onto the overworld map';

COMMENT ON COLUMN "public"."overlays"."url_dark" IS 'dark version of the overlay';

ALTER TABLE "public"."overlays" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."overlays_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "created_at" timestamp with time zone DEFAULT "now"(),
    "bld_general" boolean DEFAULT false NOT NULL,
    "bld_tabs" boolean DEFAULT false NOT NULL,
    "bld_gallery" boolean DEFAULT false NOT NULL,
    "sense_general" boolean DEFAULT false NOT NULL,
    "bld_map" boolean DEFAULT false NOT NULL,
    "email" character varying DEFAULT ''::character varying NOT NULL,
    "bld_times" boolean DEFAULT false NOT NULL,
    "bld_tips" boolean DEFAULT false NOT NULL,
    "bld_further" boolean DEFAULT false NOT NULL,
    "sense_map" boolean DEFAULT false NOT NULL,
    "sense_facilities" boolean DEFAULT false NOT NULL,
    "sense_photos" boolean DEFAULT false NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "is_admin" boolean DEFAULT false NOT NULL,
    "name" "text"
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

COMMENT ON TABLE "public"."profiles" IS 'List of all contributors and their rights';

CREATE TABLE IF NOT EXISTS "public"."rooms" (
    "id" bigint NOT NULL,
    "building" "text" NOT NULL,
    "room_code" "text" NOT NULL,
    "room_name" "text" NOT NULL,
    "aka" "text" NOT NULL,
    "capacity" bigint DEFAULT '0'::bigint NOT NULL,
    "hearing_loop" boolean DEFAULT false NOT NULL,
    "wheelchair" boolean DEFAULT false NOT NULL,
    "outlets" boolean DEFAULT false NOT NULL,
    "projector" boolean DEFAULT false NOT NULL,
    "whiteboard" boolean DEFAULT false NOT NULL,
    "lecturn" boolean DEFAULT false NOT NULL,
    "room_type" "text" DEFAULT 'Flat'::"text" NOT NULL,
    "modified_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."rooms" OWNER TO "postgres";

ALTER TABLE "public"."rooms" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."rooms_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."site_settings" (
    "id" bigint NOT NULL,
    "key" "text" NOT NULL,
    "data" "json" NOT NULL
);

ALTER TABLE "public"."site_settings" OWNER TO "postgres";

ALTER TABLE "public"."site_settings" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."site_settings_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."space_dummy" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "modified_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "type" "text" DEFAULT 'Study Space'::"text" NOT NULL,
    "location" double precision[] DEFAULT '{}'::double precision[] NOT NULL
);

ALTER TABLE "public"."space_dummy" OWNER TO "postgres";

ALTER TABLE "public"."space_dummy" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."space_dummy_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."space_gallery_images" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "space" "uuid",
    "url" "text",
    "alt" "text",
    "caption" "text"
);

ALTER TABLE "public"."space_gallery_images" OWNER TO "postgres";

ALTER TABLE "public"."space_gallery_images" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."space_gallery_images_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."space_styles" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "category" "text" NOT NULL,
    "icon" "text" NOT NULL,
    "colour" "text" DEFAULT '#ffffff'::"text",
    "descriptor" "text"
);

ALTER TABLE "public"."space_styles" OWNER TO "postgres";

COMMENT ON TABLE "public"."space_styles" IS 'Style information for student spaces';

COMMENT ON COLUMN "public"."space_styles"."colour" IS 'Colour associated with this space category';

ALTER TABLE "public"."space_styles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."space_styles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."spaces" (
    "name" "text" NOT NULL,
    "canonical" "text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "type" "text" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "food_drink_allowed" boolean DEFAULT false NOT NULL,
    "microwave" boolean DEFAULT false NOT NULL,
    "kettle" boolean DEFAULT false NOT NULL,
    "wheelchair" boolean DEFAULT false NOT NULL,
    "location" double precision[] DEFAULT '{0,0}'::double precision[],
    "building" "text",
    "outlets" boolean DEFAULT false NOT NULL,
    "icon_override" "text",
    "seating" boolean DEFAULT false NOT NULL,
    "UUID" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "building_uuid" "uuid",
    "food_drink_allowed_note" "text" DEFAULT ''::"text" NOT NULL,
    "microwave_note" "text" DEFAULT ''::"text" NOT NULL,
    "kettle_note" "text" DEFAULT ''::"text" NOT NULL,
    "wheelchair_note" "text" DEFAULT ''::"text" NOT NULL,
    "seating_note" "text" DEFAULT ''::"text" NOT NULL,
    "outlets_note" "text" DEFAULT ''::"text" NOT NULL,
    "primary_image_url" "text",
    "primary_image_alt" "text",
    "tips" "text"[] DEFAULT '{}'::"text"[] NOT NULL,
    "primary_image_panorama" boolean DEFAULT false NOT NULL,
    "sense_exp" "text" DEFAULT ''::"text" NOT NULL,
    "sense_exp_display" boolean DEFAULT false NOT NULL,
    "wayfinding" "text" DEFAULT ''::"text" NOT NULL,
    "wayfinding_display" boolean DEFAULT false NOT NULL,
    "phys_access" "text" DEFAULT ''::"text" NOT NULL,
    "phys_access_display" boolean DEFAULT false NOT NULL,
    "further_info" "text" DEFAULT ''::"text" NOT NULL,
    "further_info_display" boolean DEFAULT false NOT NULL,
    "aka" "text" DEFAULT ''::"text",
    "phys_access_video" "text" DEFAULT ''::"text",
    "sense_exp_video" "text",
    "wayfinding_video" "text",
    "opening_times" "json",
    "floor" smallint DEFAULT '0'::smallint NOT NULL,
    "location_internal" double precision[] DEFAULT '{0,0}'::double precision[] NOT NULL,
    "clickthrough" boolean DEFAULT false,
    "published" boolean DEFAULT true NOT NULL,
    "updated_by" "uuid"
);

ALTER TABLE "public"."spaces" OWNER TO "postgres";

COMMENT ON TABLE "public"."spaces" IS 'Non-building spaces with distinct pages attached to them';

ALTER TABLE ONLY "public"."building_gallery_images"
    ADD CONSTRAINT "building_gallery_images_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."buildings"
    ADD CONSTRAINT "buildings_canonical_key" UNIQUE ("canonical");

ALTER TABLE ONLY "public"."buildings"
    ADD CONSTRAINT "buildings_pkey" PRIMARY KEY ("UUID");

ALTER TABLE ONLY "public"."floorplans"
    ADD CONSTRAINT "floorplans_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."flyovers"
    ADD CONSTRAINT "flyovers_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."nav_nodes"
    ADD CONSTRAINT "nav_nodes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."overlays"
    ADD CONSTRAINT "overlays_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("email", "user_id");

ALTER TABLE ONLY "public"."rooms"
    ADD CONSTRAINT "rooms_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."site_settings"
    ADD CONSTRAINT "site_settings_key_key" UNIQUE ("key");

ALTER TABLE ONLY "public"."site_settings"
    ADD CONSTRAINT "site_settings_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."space_dummy"
    ADD CONSTRAINT "space_dummy_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."space_gallery_images"
    ADD CONSTRAINT "space_gallery_images_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."space_styles"
    ADD CONSTRAINT "space_styles_category_key" UNIQUE ("category");

ALTER TABLE ONLY "public"."space_styles"
    ADD CONSTRAINT "space_styles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."spaces"
    ADD CONSTRAINT "spaces_canonical_key" UNIQUE ("canonical");

ALTER TABLE ONLY "public"."spaces"
    ADD CONSTRAINT "spaces_pkey" PRIMARY KEY ("UUID");

CREATE OR REPLACE TRIGGER "handle_updated_at" BEFORE UPDATE ON "public"."buildings" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

CREATE OR REPLACE TRIGGER "handle_updated_at" BEFORE UPDATE ON "public"."spaces" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

ALTER TABLE ONLY "public"."building_gallery_images"
    ADD CONSTRAINT "building_gallery_images_building_fkey" FOREIGN KEY ("building") REFERENCES "public"."buildings"("canonical");

ALTER TABLE ONLY "public"."floorplans"
    ADD CONSTRAINT "floorplans_building_fkey" FOREIGN KEY ("building") REFERENCES "public"."buildings"("UUID");

ALTER TABLE ONLY "public"."nav_nodes"
    ADD CONSTRAINT "nav_nodes_building_fkey" FOREIGN KEY ("building") REFERENCES "public"."buildings"("UUID") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."rooms"
    ADD CONSTRAINT "public_rooms_building_fkey" FOREIGN KEY ("building") REFERENCES "public"."buildings"("canonical");

ALTER TABLE ONLY "public"."spaces"
    ADD CONSTRAINT "public_spaces_type_fkey" FOREIGN KEY ("type") REFERENCES "public"."space_styles"("category");

ALTER TABLE ONLY "public"."space_gallery_images"
    ADD CONSTRAINT "space_gallery_images_space_fkey" FOREIGN KEY ("space") REFERENCES "public"."spaces"("UUID") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."spaces"
    ADD CONSTRAINT "spaces_building_fkey" FOREIGN KEY ("building") REFERENCES "public"."buildings"("canonical");

ALTER TABLE ONLY "public"."spaces"
    ADD CONSTRAINT "spaces_building_uuid_fkey" FOREIGN KEY ("building_uuid") REFERENCES "public"."buildings"("UUID");

ALTER TABLE ONLY "public"."spaces"
    ADD CONSTRAINT "spaces_updated_by_fkey" FOREIGN KEY ("updated_by") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;

CREATE POLICY "Enable CRUD for authenticated users only" ON "public"."space_gallery_images" TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable DELETE for authenticated users only" ON "public"."floorplans" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable UPDATE for authenticated users only" ON "public"."floorplans" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable UPDATE for authenticated users only" ON "public"."flyovers" FOR UPDATE TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable UPDATE for authenticated users only" ON "public"."site_settings" FOR UPDATE TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable delete access for all authenticated users" ON "public"."building_gallery_images" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable delete for authenticated users only" ON "public"."nav_nodes" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."building_gallery_images" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."buildings" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."floorplans" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."nav_nodes" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."spaces" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."building_gallery_images" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."buildings" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."floorplans" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."flyovers" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."nav_nodes" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."overlays" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."rooms" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."site_settings" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."space_dummy" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."space_gallery_images" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."space_styles" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."spaces" FOR SELECT USING (true);

CREATE POLICY "Enable select for users based on user_id" ON "public"."profiles" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable update for authenticated users only" ON "public"."building_gallery_images" FOR UPDATE TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users only" ON "public"."buildings" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users only" ON "public"."nav_nodes" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users only" ON "public"."overlays" FOR UPDATE TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users only" ON "public"."spaces" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

ALTER TABLE "public"."building_gallery_images" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."buildings" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."floorplans" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."flyovers" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."nav_nodes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."overlays" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."rooms" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."site_settings" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."space_dummy" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."space_gallery_images" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."space_styles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."spaces" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT USAGE ON SCHEMA "public" TO "supabase_auth_admin";

GRANT ALL ON FUNCTION "public"."check_user_permissions"("event" "jsonb") TO "anon";
GRANT ALL ON FUNCTION "public"."check_user_permissions"("event" "jsonb") TO "authenticated";
GRANT ALL ON FUNCTION "public"."check_user_permissions"("event" "jsonb") TO "service_role";

GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "service_role";
GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "supabase_auth_admin";

GRANT ALL ON FUNCTION "public"."get_user_permissions"("user_uuid" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."get_user_permissions"("user_uuid" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_user_permissions"("user_uuid" "uuid") TO "service_role";

GRANT ALL ON TABLE "public"."building_gallery_images" TO "anon";
GRANT ALL ON TABLE "public"."building_gallery_images" TO "authenticated";
GRANT ALL ON TABLE "public"."building_gallery_images" TO "service_role";

GRANT ALL ON SEQUENCE "public"."building_gallery_images_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."building_gallery_images_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."building_gallery_images_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."buildings" TO "anon";
GRANT ALL ON TABLE "public"."buildings" TO "authenticated";
GRANT ALL ON TABLE "public"."buildings" TO "service_role";

GRANT ALL ON TABLE "public"."floorplans" TO "anon";
GRANT ALL ON TABLE "public"."floorplans" TO "authenticated";
GRANT ALL ON TABLE "public"."floorplans" TO "service_role";

GRANT ALL ON SEQUENCE "public"."floorplans_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."floorplans_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."floorplans_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."flyovers" TO "anon";
GRANT ALL ON TABLE "public"."flyovers" TO "authenticated";
GRANT ALL ON TABLE "public"."flyovers" TO "service_role";

GRANT ALL ON SEQUENCE "public"."flyovers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."flyovers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."flyovers_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."nav_nodes" TO "anon";
GRANT ALL ON TABLE "public"."nav_nodes" TO "authenticated";
GRANT ALL ON TABLE "public"."nav_nodes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."nav_nodes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."nav_nodes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."nav_nodes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."overlays" TO "anon";
GRANT ALL ON TABLE "public"."overlays" TO "authenticated";
GRANT ALL ON TABLE "public"."overlays" TO "service_role";

GRANT ALL ON SEQUENCE "public"."overlays_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."overlays_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."overlays_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."rooms" TO "anon";
GRANT ALL ON TABLE "public"."rooms" TO "authenticated";
GRANT ALL ON TABLE "public"."rooms" TO "service_role";

GRANT ALL ON SEQUENCE "public"."rooms_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."rooms_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."rooms_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."site_settings" TO "anon";
GRANT ALL ON TABLE "public"."site_settings" TO "authenticated";
GRANT ALL ON TABLE "public"."site_settings" TO "service_role";

GRANT ALL ON SEQUENCE "public"."site_settings_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."site_settings_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."site_settings_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."space_dummy" TO "anon";
GRANT ALL ON TABLE "public"."space_dummy" TO "authenticated";
GRANT ALL ON TABLE "public"."space_dummy" TO "service_role";

GRANT ALL ON SEQUENCE "public"."space_dummy_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."space_dummy_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."space_dummy_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."space_gallery_images" TO "anon";
GRANT ALL ON TABLE "public"."space_gallery_images" TO "authenticated";
GRANT ALL ON TABLE "public"."space_gallery_images" TO "service_role";

GRANT ALL ON SEQUENCE "public"."space_gallery_images_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."space_gallery_images_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."space_gallery_images_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."space_styles" TO "anon";
GRANT ALL ON TABLE "public"."space_styles" TO "authenticated";
GRANT ALL ON TABLE "public"."space_styles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."space_styles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."space_styles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."space_styles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."spaces" TO "anon";
GRANT ALL ON TABLE "public"."spaces" TO "authenticated";
GRANT ALL ON TABLE "public"."spaces" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
